diff --git a/es-app/src/CollectionSystemManager.cpp b/es-app/src/CollectionSystemManager.cpp
index de71f138..e247ee02 100644
--- a/es-app/src/CollectionSystemManager.cpp
+++ b/es-app/src/CollectionSystemManager.cpp
@@ -15,6 +15,7 @@
 #include <fstream>
 #include "Gamelist.h"
 #include "FileSorts.h"
+#include "utils/ThreadPool.h"
 
 std::string myCollectionsName = "collections";
 
@@ -161,7 +162,7 @@ void CollectionSystemManager::saveCustomCollection(SystemData* sys)
 	}
 	else
 	{
-		LOG(LogError) << "Couldn't find collection to save! " << name;
+		LOG(LogError) << "CollectionSystemManager::saveCustomCollection() - Couldn't find collection to save! " << name;
 	}
 }
 
@@ -498,7 +499,7 @@ void CollectionSystemManager::setEditMode(std::string collectionName)
 {
 	if (mCustomCollectionSystemsData.find(collectionName) == mCustomCollectionSystemsData.cend())
 	{
-		LOG(LogError) << "Tried to edit a non-existing collection: " << collectionName;
+		LOG(LogError) << "CollectionSystemManager::setEditMode() - Tried to edit a non-existing collection: " << collectionName;
 		return;
 	}
 	mIsEditingCustom = true;
@@ -984,7 +985,7 @@ void CollectionSystemManager::populateCustomCollection(CollectionSystemData* sys
 		}
 		else
 		{
-			LOG(LogInfo) << "Couldn't find game referenced at '" << gameKey << "' for system config '" << path << "'";
+			LOG(LogInfo) << "CollectionSystemManager::populateCustomCollection() - Couldn't find game referenced at '" << gameKey << "' for system config '" << path << "'";
 		}
 	}
 	updateCollectionFolderMetadata(newSys);
@@ -1023,40 +1024,66 @@ void CollectionSystemManager::removeCollectionsFromDisplayedSystems()
 void CollectionSystemManager::addEnabledCollectionsToDisplayedSystems(std::map<std::string, CollectionSystemData>* colSystemData, std::unordered_map<std::string, FileData*>* pMap)
 {
 	// add auto enabled ones
-	for(std::map<std::string, CollectionSystemData>::iterator it = colSystemData->begin() ; it != colSystemData->end() ; it++ )
+	if (Settings::getInstance()->getBool("ThreadedLoading"))
 	{
-		if(it->second.isEnabled)
+		LOG(LogDebug) << "CollectionSystemManager::addEnabledCollectionsToDisplayedSystems() - Collection threaded loading";
+		std::vector<CollectionSystemData*> collectionsToPopulate;
+		for (auto it = colSystemData->begin(); it != colSystemData->end(); it++)
+			if (it->second.isEnabled && !it->second.isPopulated)
+				collectionsToPopulate.push_back(&(it->second));
+
+		if (collectionsToPopulate.size() > 1)
 		{
-			// check if populated, otherwise populate
-			if (!it->second.isPopulated)
+			getAllGamesCollection();
+
+			Utils::ThreadPool pool;
+
+			for (auto collection : collectionsToPopulate)
 			{
-				if(it->second.decl.isCustom)
-				{
-					populateCustomCollection(&(it->second), pMap);
-				}
+				if (collection->decl.isCustom)
+					pool.queueWorkItem([this, collection, pMap] { populateCustomCollection(collection, pMap); });
 				else
-				{
-					populateAutoCollection(&(it->second));
-				}
+					pool.queueWorkItem([this, collection, pMap] { populateAutoCollection(collection); });
 			}
-			// check if it has its own view
-			if(!it->second.decl.isCustom || themeFolderExists(it->first) || !Settings::getInstance()->getBool("UseCustomCollectionsSystem"))
+
+			pool.wait();
+		}
+	}
+	// add auto enabled ones
+	for(std::map<std::string, CollectionSystemData>::iterator it = colSystemData->begin() ; it != colSystemData->end() ; it++ )
+	{
+		if(!it->second.isEnabled)
+			continue;
+
+		// check if populated, otherwise populate
+		if (!it->second.isPopulated)
+		{
+			if(it->second.decl.isCustom)
 			{
-				if (it->second.decl.displayIfEmpty || it->second.system->getRootFolder()->getChildren().size() > 0)
-				{
-					// exists theme folder, or we chose not to bundle it under the custom-collections system
-					// so we need to create a view
-					if (it->second.isEnabled)
-						SystemData::sSystemVector.push_back(it->second.system);
-				}
+				populateCustomCollection(&(it->second), pMap);
 			}
 			else
 			{
-				FileData* newSysRootFolder = it->second.system->getRootFolder();
-				mCustomCollectionsBundle->getRootFolder()->addChild(newSysRootFolder);
-				mCustomCollectionsBundle->getIndex(true)->importIndex(it->second.system->getIndex(true));
+				populateAutoCollection(&(it->second));
+			}
+		}
+		// check if it has its own view
+		if(!it->second.decl.isCustom || themeFolderExists(it->first) || !Settings::getInstance()->getBool("UseCustomCollectionsSystem"))
+		{
+			if (it->second.decl.displayIfEmpty || it->second.system->getRootFolder()->getChildren().size() > 0)
+			{
+				// exists theme folder, or we chose not to bundle it under the custom-collections system
+				// so we need to create a view
+				if (it->second.isEnabled)
+					SystemData::sSystemVector.push_back(it->second.system);
 			}
 		}
+		else
+		{
+			FileData* newSysRootFolder = it->second.system->getRootFolder();
+			mCustomCollectionsBundle->getRootFolder()->addChild(newSysRootFolder);
+			mCustomCollectionsBundle->getIndex(true)->importIndex(it->second.system->getIndex(true));
+		}
 	}
 }
 
@@ -1198,7 +1225,7 @@ std::vector<std::string> CollectionSystemManager::getCollectionsFromConfigFolder
 				}
 				else
 				{
-					LOG(LogInfo) << "Found non-collection config file in collections folder: " << filename;
+					LOG(LogInfo) << "CollectionSystemManager::getCollectionsFromConfigFolder() - Found non-collection config file in collections folder: " << filename;
 				}
 			}
 		}
diff --git a/es-app/src/SystemData.cpp b/es-app/src/SystemData.cpp
index da393f1b..1acec1b4 100644
--- a/es-app/src/SystemData.cpp
+++ b/es-app/src/SystemData.cpp
@@ -906,4 +906,13 @@ SystemData* SystemData::getParentGroupSystem()
 			return sys;
 
 	return this;
-}
\ No newline at end of file
+}
+
+SystemData* SystemData::getSystem(const std::string name)
+{
+	for (auto sys : SystemData::sSystemVector)
+		if (sys->getName() == name)
+			return sys;
+
+	return nullptr;
+}
diff --git a/es-app/src/SystemData.h b/es-app/src/SystemData.h
index e783e411..3c927115 100644
--- a/es-app/src/SystemData.h
+++ b/es-app/src/SystemData.h
@@ -105,6 +105,8 @@ public:
 	SystemData(const std::string& name, const std::string& fullName, SystemEnvironmentData* envData, const std::string& themeFolder, bool CollectionSystem = false, bool groupedSystem = false);
 	~SystemData();
 
+	static SystemData* getSystem(const std::string name);
+
 	inline FolderData* getRootFolder() const { return mRootFolder; };
 	inline const std::string& getName() const { return mName; }
 	inline const std::string& getFullName() const { return mFullName; }
diff --git a/es-app/src/views/SystemView.cpp b/es-app/src/views/SystemView.cpp
index 9d6b0bc8..a6839faf 100644
--- a/es-app/src/views/SystemView.cpp
+++ b/es-app/src/views/SystemView.cpp
@@ -12,6 +12,8 @@
 #include "components/VideoComponent.h"
 #include "components/VideoVlcComponent.h"
 #include <random>
+#include "guis/GuiTextEditPopupKeyboard.h"
+#include "guis/GuiTextEditPopup.h"
 
 // buffer values for scrolling velocity (left, stopped, right)
 const int logoBuffersLeft[] = { -5, -2, -1 };
@@ -327,10 +329,38 @@ void SystemView::goToSystem(SystemData* system, bool animate)
 		finishAnimation(0);
 }
 
+void SystemView::showQuickSearch()
+{
+	SystemData* all = SystemData::getSystem("all");
+	if (all != nullptr)
+	{
+		auto updateVal = [this, all](const std::string& newVal)
+		{
+			auto index = all->getIndex(true);
+
+			index->resetFilters();
+			index->setTextFilter(newVal);
+
+			ViewController::get()->reloadGameListView(all);
+			ViewController::get()->goToGameList(all, false);
+		};
+
+		//if (Settings::getInstance()->getBool("UseOSK"))
+			mWindow->pushGui(new GuiTextEditPopupKeyboard(mWindow, _("QUICK SEARCH"), "", updateVal, false));
+		//else
+			//mWindow->pushGui(new GuiTextEditPopup(mWindow, _("QUICK SEARCH"), "", updateVal, false));
+	}
+}
+
 bool SystemView::input(InputConfig* config, Input input)
 {
 	if(input.value != 0)
 	{
+		if (config->isMappedTo("y", input))
+		{
+			showQuickSearch();
+			return true;
+		}
 		if(config->getDeviceId() == DEVICE_KEYBOARD && input.value && input.id == SDLK_r && SDL_GetModState() & KMOD_LCTRL && Settings::getInstance()->getBool("Debug"))
 		{
 			LOG(LogInfo) << " Reloading all";
@@ -694,6 +724,8 @@ std::vector<HelpPrompt> SystemView::getHelpPrompts()
 
 	prompts.push_back(HelpPrompt(BUTTON_OK, _("SELECT")));
 	prompts.push_back(HelpPrompt("x", _("RANDOM")));
+	if (SystemData::getSystem("all") != nullptr)
+		prompts.push_back(HelpPrompt("y", _("SEARCH"))); // QUICK
 
 	if (!UIModeController::getInstance()->isUIModeKid() && Settings::getInstance()->getBool("ScreenSaverControls"))
 		prompts.push_back(HelpPrompt("select", _("LAUNCH SCREENSAVER")));
diff --git a/es-app/src/views/SystemView.h b/es-app/src/views/SystemView.h
index 2b431ea4..4b97187a 100644
--- a/es-app/src/views/SystemView.h
+++ b/es-app/src/views/SystemView.h
@@ -77,6 +77,7 @@ private:
 	void	 activateExtras(int cursor, bool activate = true);	
 	void	 updateExtras(const std::function<void(GuiComponent*)>& func);
 	void	 clearEntries();
+	void	 showQuickSearch();
 
 	virtual void onScreenSaverActivate() override;
 	virtual void onScreenSaverDeactivate() override;
diff --git a/es-core/src/guis/GuiTextEditPopup.cpp b/es-core/src/guis/GuiTextEditPopup.cpp
index 4aa1693e..a3133bb7 100644
--- a/es-core/src/guis/GuiTextEditPopup.cpp
+++ b/es-core/src/guis/GuiTextEditPopup.cpp
@@ -3,6 +3,7 @@
 #include "components/ButtonComponent.h"
 #include "components/MenuComponent.h"
 #include "components/TextEditComponent.h"
+#include "Settings.h"
 
 GuiTextEditPopup::GuiTextEditPopup(Window* window, const std::string& title, const std::string& initValue,
 	const std::function<void(const std::string&)>& okCallback, bool multiLine, const char* acceptBtnText)
@@ -41,7 +42,12 @@ GuiTextEditPopup::GuiTextEditPopup(Window* window, const std::string& title, con
 	mText->setSize(0, textHeight);
 
 	setSize(Renderer::getScreenWidth() * 0.5f, mTitle->getFont()->getHeight() + textHeight + mButtonGrid->getSize().y() + 40);
-	setPosition((Renderer::getScreenWidth() - mSize.x()) / 2, (Renderer::getScreenHeight() - mSize.y()) / 2);
+	//setPosition((Renderer::getScreenWidth() - mSize.x()) / 2, (Renderer::getScreenHeight() - mSize.y()) / 2);
+	float new_y = (Renderer::getScreenHeight() - mSize.y()) / 2;
+	if (Settings::getInstance()->getBool("MenusOnDisplayTop"))
+		new_y = 0.f;
+
+	setPosition((Renderer::getScreenWidth() - mSize.x()) / 2, new_y);
 }
 
 void GuiTextEditPopup::onSizeChanged()
diff --git a/es-core/src/guis/GuiTextEditPopupKeyboard.cpp b/es-core/src/guis/GuiTextEditPopupKeyboard.cpp
index 8d95dfb0..857704f2 100644
--- a/es-core/src/guis/GuiTextEditPopupKeyboard.cpp
+++ b/es-core/src/guis/GuiTextEditPopupKeyboard.cpp
@@ -3,6 +3,7 @@
 #include "utils/StringUtil.h"
 #include "Log.h"
 #include "EsLocale.h"
+#include "Settings.h"
 
 std::vector<std::vector<const char*>> kbUs {
 
@@ -169,7 +170,7 @@ GuiTextEditPopupKeyboard::GuiTextEditPopupKeyboard(Window* window, const std::st
 		else
 			setSize(Renderer::getScreenWidth() * 0.5f, mTitle->getFont()->getHeight() + textHeight + mKeyboardGrid->getSize().y() + 40);
 
-		setPosition((Renderer::getScreenWidth() - mSize.x()) / 2, (Renderer::getScreenHeight() - mSize.y()) / 2);
+		//setPosition((Renderer::getScreenWidth() - mSize.x()) / 2, (Renderer::getScreenHeight() - mSize.y()) / 2);
 	}
 	else 
 	{
@@ -178,8 +179,14 @@ GuiTextEditPopupKeyboard::GuiTextEditPopupKeyboard(Window* window, const std::st
 		else // Set size based on ScreenHieght * .08f by the amount of keyboard rows there are.
 			setSize(Renderer::getScreenWidth() * 0.95f, mTitle->getFont()->getHeight() + textHeight + 40 + (Renderer::getScreenHeight() * 0.085f) * 6);
 
-		setPosition((Renderer::getScreenWidth() - mSize.x()) / 2, (Renderer::getScreenHeight() - mSize.y()) / 2);
+		//setPosition((Renderer::getScreenWidth() - mSize.x()) / 2, (Renderer::getScreenHeight() - mSize.y()) / 2);
 	}
+
+	float new_y = (Renderer::getScreenHeight() - mSize.y()) / 2;
+	if (Settings::getInstance()->getBool("MenusOnDisplayTop"))
+		new_y = 0.f;
+
+	setPosition((Renderer::getScreenWidth() - mSize.x()) / 2, new_y);
 }
 
 
@@ -224,7 +231,7 @@ bool GuiTextEditPopupKeyboard::input(InputConfig* config, Input input)
 		return true;
 	}
 
-	// For deleting a chara (Left Top Button)
+	// For deleting a char (Left Top Button)
 	if (config->isMappedTo("pageup", input) && input.value) {
 		mText->startEditing();
 		mText->textInput("\b");
diff --git a/resources/locale/es/emulationstation2.po b/resources/locale/es/emulationstation2.po
index f62282e2..9b383bba 100644
--- a/resources/locale/es/emulationstation2.po
+++ b/resources/locale/es/emulationstation2.po
@@ -1948,3 +1948,7 @@ msgstr "Núcleo proporcionado"
 
 msgid "Do not set"
 msgstr "No establecer"
+
+#:
+msgid "QUICK SEARCH"
+msgstr "BÚSQUEDA RÁPIDA"
